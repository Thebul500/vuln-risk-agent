import request from 'supertest';\nimport express from 'express';\nimport { jest } from '@jest/globals';\n\n// Mock dependencies\njest.mock('../config/security.js');\njest.mock('../utils/logger.js');\njest.mock('../services/threatModelingService.js');\njest.mock('../services/npmAuditService.js');\njest.mock('../services/vulnResearchService.js');\njest.mock('../services/reportingService.js');\n\n// Import the app after mocking\nimport { createApp } from '../app.js';\n\ndescribe('Vuln Risk Agent API', () => {\n  let app;\n\n  beforeAll(() => {\n    process.env.NODE_ENV = 'test';\n    process.env.GITHUB_TOKEN = 'test-token';\n    process.env.OPENAI_API_KEY = 'sk-test-key';\n    app = createApp();\n  });\n\n  afterAll(() => {\n    delete process.env.NODE_ENV;\n    delete process.env.GITHUB_TOKEN;\n    delete process.env.OPENAI_API_KEY;\n  });\n\n  describe('Health Check', () => {\n    test('GET /health should return 200', async () => {\n      const response = await request(app)\n        .get('/health')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('status', 'healthy');\n      expect(response.body).toHaveProperty('timestamp');\n      expect(response.body).toHaveProperty('version');\n    });\n  });\n\n  describe('API Documentation', () => {\n    test('GET /api-docs should return API documentation', async () => {\n      const response = await request(app)\n        .get('/api-docs')\n        .expect(200);\n\n      expect(response.body).toHaveProperty('endpoints');\n      expect(response.body.endpoints).toHaveProperty('POST /analyze');\n    });\n  });\n\n  describe('Analysis Endpoint', () => {\n    test('POST /analyze should require githubUrl', async () => {\n      const response = await request(app)\n        .post('/analyze')\n        .send({})\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error');\n      expect(response.body.code).toBe('MISSING_URL');\n    });\n\n    test('POST /analyze should validate GitHub URL format', async () => {\n      const response = await request(app)\n        .post('/analyze')\n        .send({ githubUrl: 'invalid-url' })\n        .expect(400);\n\n      expect(response.body).toHaveProperty('error');\n      expect(response.body.code).toBe('INVALID_URL_FORMAT');\n    });\n\n    test('POST /analyze should accept valid GitHub URL', async () => {\n      const validUrls = [\n        'https://github.com/owner/repo',\n        'https://github.com/owner/repo.git',\n        'http://github.com/owner/repo/',\n      ];\n\n      for (const url of validUrls) {\n        const response = await request(app)\n          .post('/analyze')\n          .send({ githubUrl: url });\n\n        // Should not be a validation error (400)\n        expect(response.status).not.toBe(400);\n      }\n    });\n\n    test('POST /analyze should handle invalid GitHub URLs', async () => {\n      const invalidUrls = [\n        'https://gitlab.com/owner/repo',\n        'https://github.com/',\n        'not-a-url',\n        'https://github.com/owner',\n      ];\n\n      for (const url of invalidUrls) {\n        const response = await request(app)\n          .post('/analyze')\n          .send({ githubUrl: url })\n          .expect(400);\n\n        expect(response.body.code).toBe('INVALID_URL_FORMAT');\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('Should handle 404 for unknown endpoints', async () => {\n      const response = await request(app)\n        .get('/unknown-endpoint')\n        .expect(404);\n\n      expect(response.body).toHaveProperty('error');\n      expect(response.body.code).toBe('NOT_FOUND');\n      expect(response.body).toHaveProperty('availableEndpoints');\n    });\n\n    test('Should include CORS headers', async () => {\n      const response = await request(app)\n        .get('/health');\n\n      expect(response.headers).toHaveProperty('access-control-allow-origin');\n    });\n\n    test('Should include security headers', async () => {\n      const response = await request(app)\n        .get('/health');\n\n      expect(response.headers).toHaveProperty('x-content-type-options');\n      expect(response.headers).toHaveProperty('x-frame-options');\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    test('Should apply rate limiting', async () => {\n      // Make multiple requests quickly\n      const requests = Array(10).fill().map(() => \n        request(app).get('/health')\n      );\n\n      const responses = await Promise.all(requests);\n      \n      // All should succeed initially (depending on rate limit config)\n      responses.forEach(response => {\n        expect([200, 429]).toContain(response.status);\n      });\n    });\n  });\n});\n\ndescribe('Security Features', () => {\n  test('Should validate environment variables', async () => {\n    const originalToken = process.env.GITHUB_TOKEN;\n    delete process.env.GITHUB_TOKEN;\n\n    // This should throw during app creation\n    expect(() => {\n      createApp();\n    }).toThrow('Missing required environment variables');\n\n    process.env.GITHUB_TOKEN = originalToken;\n  });\n\n  test('Should sanitize error messages in production', async () => {\n    const originalEnv = process.env.NODE_ENV;\n    process.env.NODE_ENV = 'production';\n\n    const app = createApp();\n    \n    // Force an error and check that sensitive info isn't leaked\n    const response = await request(app)\n      .post('/analyze')\n      .send({ githubUrl: 'https://github.com/owner/nonexistent-repo' });\n\n    // Should not contain sensitive file paths or internal details\n    expect(response.body.error).not.toMatch(/\\/tmp\\//);\n    expect(response.body.error).not.toMatch(/process\\.env/);\n\n    process.env.NODE_ENV = originalEnv;\n  });\n});"